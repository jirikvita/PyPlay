#!/usr/bin/python


from __future__ import print_function

import ROOT



quarks = {'u' : [ROOT.kGreen+2, 20, 'u', +2, 3, +0.5,  0],
          'd' : [ROOT.kBlue,    21, 'd', -1, 3, -0.5,  0 ],
          's' : [ROOT.kRed,     22, 's', -1, 3,  0,   -1]}

aquarks = {'ub' : [ROOT.kGreen+2, 24, '#bar{u}', -2, 3, -0.5,  0],
           'db' : [ROOT.kBlue,    25, '#bar{d}', +1, 3, +0.5,  0 ],
           'sb' : [ROOT.kRed,     26, '#bar{s}', +1, 3,  0,   1]}


#########################################
class cquark:
  # code generated by PrintGettersAndSetters.py
  def __init__(self, name, col, mark,  texname, qnum, qdenom, I3, S):
    self._col = col
    self._mark = mark
    self._name = name
    self._texname = texname
    self._qnum = qnum
    self._qdenom = qdenom
    self._I3 = I3
    self._S = S

  def GetCol(self): return self._col
  def GetMark(self): return self._mark
  def GetName(self): return self._name
  def GetTexName(self): return self._texname
  def GetQnum(self): return self._qnum
  def GetQdenom(self): return self._qdenom
  def GetI3(self): return self._I3
  def GetS(self): return self._S

  def SetCol(self, col): self._col = col
  def SetMark(self, mark): self._mark = mark
  def SetName(self, name): self._name = name
  def SetTexName(self, texname): self._texname = texname
  def SetQnum(self, qnum): self._qnum = qnum
  def SetQdenom(self, qdenom): self._qdenom = qdenom
  def SetI3(self, I3): self._I3 = I3
  def SetS(self, S): self._S = S

  # manual:
  def Print(self):
      print('Quark {} charge {}/{} I3={} S={}'.format(self.GetName(), self.GetQnum(), self.GetQdenom(), self.GetI3(), self.GetS()))
      return

#########################################
class chadron:
  # code generated by PrintGettersAndSetters.py
  def __init__(self, name, quarks, texname, Q, I3, S):
    self._id = id
    self._name = name
    self._quarks = quarks
    self._texname = texname
    self._Q = Q
    self._I3 = I3
    self._S = S

  def GetName(self): return self._name
  def GetQuarks(self): return self._quarks
  def GetTexName(self): return self._texname
  def GetQ(self): return self._Q
  def GetI3(self): return self._I3
  def GetS(self): return self._S

  def SetName(self, name): self._name = name
  def SetQuarks(self, quarks): self._quarks = quarks
  def SetTexName(self, texname): self._texname = texname
  def SetQ(self, Q): self._Q = Q
  def SetI3(self, I3): self._I3 = I3
  def SetS(self, S): self._S = S


  # manual
  def __init__(self, name, quarks, texname):
    self._id = id
    self._name = name
    self._quarks = quarks
    self._texname = texname

    Q = 0
    I3 = 0
    S = 0
    for qq in self.GetQuarks():
        Q = Q + qq.GetQnum() / (1.*qq.GetQdenom())
        I3 = I3 + qq.GetI3()
        S = S + qq.GetS()

    self._Q = int(Q)
    self._I3 = I3
    self._S = S

  def MakeMarks(self):
      marks = []
      off = 0.075
      yoff = [ off, off, -off, off, -off, 0]
      xoff = [-off, off,   0,   0,  -off, 0]
      iq = 0
      for Q in self.GetQuarks():
          mark = ROOT.TMarker(self.GetI3() + xoff[iq], self.GetS() + yoff[iq], Q.GetMark())
          mark.SetMarkerColor(Q.GetCol())
          marks.append(mark)
          iq = iq + 1
      return marks
