#!/usr/bin/python

from math import sqrt, pow, log, exp

gHealthy = 0
gSick = 1
gSuperSpreader = 2
gDead = 3

#########################################

def Count(families, status):
    n = 0
    for fam in families:
        for mem in fam:
            if mem.GetStatus() == status:
                n = n+1
    return n

#########################################
def GetWorldStatus(families):      
    status = {}
    status[gHealthy] = Count(families, gHealthy)
    status[gSick]  =Count(families, gSick)
    status[gSuperSpreader] = Count(families, gSuperSpreader)
    status[gDead] = Count(families, gDead)
    return status

#########################################

class cworld:
  # code generated by PrintGettersAndSetters.py
  def __init__(self, can, day, step, xmin, xmax, ymin, ymax, nPeople, rand, randSpeedX, randSpeedY, cols, marks):
    self._can = can
    self._day = day
    self._step = step
    self._xmin = xmin
    self._xmax = xmax
    self._ymin = ymin
    self._ymax = ymax
    self._nPeople = nPeople
    self._rand = rand
    self._randSpeedX = randSpeedX
    self._randSpeedY = randSpeedY
    self._cols = cols
    self._marks = marks

  def GetCan(self): return self._can
  def GetDay(self): return self._day
  def GetStep(self): return self._step
  def GetXmin(self): return self._xmin
  def GetXmax(self): return self._xmax
  def GetYmin(self): return self._ymin
  def GetYmax(self): return self._ymax
  def GetNPeople(self): return self._nPeople
  def GetRand(self): return self._rand
  def GetRandSpeedX(self): return self._randSpeedX
  def GetRandSpeedY(self): return self._randSpeedY
  def GetCols(self): return self._cols
  def GetMarks(self): return self._marks

  def SetCan(self, can): self._can = can
  def SetDay(self, day): self._day = day
  def SetStep(self, step): self._step = step
  def SetXmin(self, xmin): self._xmin = xmin
  def SetXmax(self, xmax): self._xmax = xmax
  def SetYmin(self, ymin): self._ymin = ymin
  def SetYmax(self, ymax): self._ymax = ymax
  def SetNPeople(self, nPeople): self._nPeople = nPeople
  def SetRand(self, rand): self._rand = rand
  def SetRandSpeedX(self, randSpeedX): self._randSpeedX = randSpeedX
  def SetRandSpeedY(self, randSpeedY): self._randSpeedY = randSpeedY
  def SetCols(self, cols): self._cols = cols
  def SetMarks(self, marks): self._marks = marks

  # manual:
  def YieldNewId(self):
      self._nPeople = self._nPeople + 1
      return self._nPeople
  def IncDay(self):
      self._day = self._day + 1
  def IncStep(self):
      self._step = self._step + 1

  def PrintStatus(self, families):
      status = GetWorldStatus(families)
      nh = status[gHealthy]
      ns = status[gSick] 
      nss = status[gSuperSpreader]
      nd = status[gDead]
      print('day {} step {} healty {} sick {} super-spreaders {} dead {}'.format(self._day, self._step, nh, ns, nss, nd ))

  #########################################

class cparams:
  # code generated by PrintGettersAndSetters.py
  def __init__(self, spreadFrequency, spreadRadius, dieProb, getWellTime, incubationTime, superSpreadFraction, initialSickFraction):
    self._spreadFrequency = spreadFrequency
    self._spreadRadius = spreadRadius
    self._dieProb = dieProb
    self._getWellTime = getWellTime
    self._incubationTime = incubationTime
    self._superSpreadFraction = superSpreadFraction
    self._initialSickFraction = initialSickFraction

  def GetSpreadFrequency(self): return self._spreadFrequency
  def GetSpreadRadius(self): return self._spreadRadius
  def GetDieProb(self): return self._dieProb
  def GetGetWellTime(self): return self._getWellTime
  def GetIncubationTime(self): return self._incubationTime
  def GetSuperSpreadFraction(self): return self._superSpreadFraction
  def GetInitialSickFraction(self): return self._initialSickFraction

  def SetSpreadFrequency(self, spreadFrequency): self._spreadFrequency = spreadFrequency
  def SetSpreadRadius(self, spreadRadius): self._spreadRadius = spreadRadius
  def SetDieProb(self, dieProb): self._dieProb = dieProb
  def SetGetWellTime(self, getWellTime): self._getWellTime = getWellTime
  def SetIncubationTime(self, incubationTime): self._incubationTime = incubationTime
  def SetSuperSpreadFraction(self, superSpreadFraction): self._superSpreadFraction = superSpreadFraction
  def SetInitialSickFraction(self, initialSickFraction): self._initialSickFraction = initialSickFraction


#########################################
class cattractor:
  # code generated by PrintGettersAndSetters.py
  def __init__(self, x, y, radius, strength):
    self._x = x
    self._y = y
    self._radius = radius
    self._strength = strength

  def GetX(self): return self._x
  def GetY(self): return self._y
  def GetRadius(self): return self._radius
  def GetStrength(self): return self._strength

  def SetX(self, x): self._x = x
  def SetY(self, y): self._y = y
  def SetRadius(self, radius): self._radius = radius
  def SetStrength(self, strength): self._strength = strength


#########################################
class cperson:
  # code generated by PrintGettersAndSetters.py
  def __init__(self, id, age, x, y, attractors, status):
    self._id = id
    self._age = age
    self._x = x
    self._y = y
    self._attractors = attractors
    self._status = status

  def GetId(self): return self._id
  def GetAge(self): return self._age
  def GetX(self): return self._x
  def GetY(self): return self._y
  def GetAttractors(self): return self._attractors
  def GetStatus(self): return self._status

  def SetId(self, id): self._id = id
  def SetAge(self, age): self._age = age
  def SetX(self, x): self._x = x
  def SetY(self, y): self._y = y
  def SetAttractors(self, attractors): self._attractors = attractors
  def SetStatus(self, status): self._status = status

  # manual:
  def SetXY(self, x,y):
      self._x = x
      self._y = y
    
#########################################
def ComputeDistance(m1, m2):
    return sqrt( pow(m1.GetX() - m2.GetX(), 2) + pow(m1.GetY() - m2.GetY(), 2) )


    
